
name: API Docker container publish

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: ${{ github.repository_owner }}/recordings-api
  UI_IMAGE_NAME: ${{ github.repository_owner }}/recordings-web-ui

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true

      - name: Get Version
        id: get_version
        run: |
          echo "GITHUB_REF=$GITHUB_REF"
          git tag --list
          git log --oneline -5
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            FULL_VERSION="${VERSION}"
          else
            if git describe --tags --abbrev=0 --match "v*.*.*" >/dev/null 2>&1; then
              VERSION=$(git describe --tags --abbrev=0 --match "v*.*.*")
              VERSION=${VERSION#v}
            else
              VERSION="0.0.0"
            fi
            BUILD_NUMBER=${GITHUB_RUN_NUMBER}
            FULL_VERSION="${VERSION}-build${BUILD_NUMBER}"
          fi
          echo "FULL_VERSION=$FULL_VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_OUTPUT

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata API
        id: api-meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.get_version.outputs.FULL_VERSION }}
            type=raw,value=latest

      - name: Build and push API Docker image
        id: build-and-push-api
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./src
          file: src/API/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.api-meta.outputs.tags }}
          labels: ${{ steps.api-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract Docker metadata Web Client
        id: ui-meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.get_version.outputs.FULL_VERSION }}
            type=raw,value=latest    

      - name: Build and push Web Client Docker image
        id: build-and-push-ui
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./src
          file: src/Client.Web/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.ui-meta.outputs.tags }}
          labels: ${{ steps.ui-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          API_TAGS: ${{ steps.api-meta.outputs.tags }}
          API_DIGEST: ${{ steps.build-and-push-api.outputs.digest }}
          UI_TAGS: ${{ steps.ui-meta.outputs.tags }}
          UI_DIGEST: ${{ steps.build-and-push-ui.outputs.digest }}
        run: |
          echo "Signing API image"
          echo "${API_TAGS}" | xargs -I {} cosign sign --yes {}@${API_DIGEST}
          echo "Signing UI image"
          echo "${UI_TAGS}" | xargs -I {} cosign sign --yes {}@${UI_DIGEST}
