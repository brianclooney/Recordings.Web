@rendermode InteractiveServer

@using Recordings.UI.Models

@inject IJSRuntime JS
@inject RecordingsState RecordingsState
@inject ILogger<AudioPlayer> Logger

<div class="card">
    <audio id="audioPlayer" controls>
        <source src="@AudioSource" type="audio/mpeg" />
        Your browser does not support the audio element
    </audio>
</div>

<script>
    function playAudio() {
        const audioPlayer = document.getElementById('audioPlayer');
        if (audioPlayer) {
            audioPlayer.load();
            audioPlayer.play();
        }
    }
    function stopAudio() {
        const audioPlayer = document.getElementById('audioPlayer');
        if (audioPlayer) {
            audioPlayer.pause();
            audioPlayer.currentTime = 0;
        }
    }
</script>

@code {

    private string? AudioSource { get; set; }

    protected override void OnInitialized()
    {
        RecordingsState.OnSelectedTrackChanged += HandleSelectedTrackChanged;
        RecordingsState.OnTrackFilterChanged += HandleTrackFilterChanged;
    }

    private void HandleSelectedTrackChanged(object? sender, EventArgs e)
    {
        AudioSource = RecordingsState.SelectedTrack == null ? null :  RecordingsState.SelectedTrack.Url;
        StateHasChanged();
    }

    private void HandleTrackFilterChanged(object? sender, EventArgs e)
    {
        AudioSource = null;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync(AudioSource == null ? "stopAudio" : "playAudio");
    }
}
